import rclpy
from rclpy.node import Node
import numpy as np
import cv2
import time

from sensor_msgs.msg import Image
from std_msgs.msg import Header
from cv_bridge import CvBridge, CvBridgeError

class DetermineColor(Node):
    def __init__(self):
        super().__init__('determine_color')
        self.image_sub = self.create_subscription(
            Image,
            '/camera/color/image_raw',
            self.callback,
            10)
        self.color_pub = self.create_publisher(Header, '/rotate_cmd', 10)
        self.bridge = CvBridge()
        self.count = 0

    def callback(self, data):
        try:
            image = self.bridge.imgmsg_to_cv2(data, 'bgr8')
            hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
            msg = Header()
            msg = data.header
            msg.frame_id = '0'  # default: STOP      
            cv2.imshow('rgb_Image', image)
            cv2.imshow('hsv_image', hsv)
            
            red_lower, red_upper = (0, 0, 100), (85, 120, 255)
            blue_lower, blue_upper = (80, 30, 30), (115, 255, 255)
            green_lower, green_upper = (40, 100, 0), (80, 255, 255)
            yellow_lower, yellow_upper = (20, 100, 100), (40, 255, 255)
            white_lower, white_upper = (200, 200, 200), (255, 255, 255)
            
            red_part = cv2.inRange(image, red_lower, red_upper)
            blue_part = cv2.inRange(hsv, blue_lower, blue_upper)
            green_part = cv2.inRange(hsv, green_lower, green_upper)
            yellow_part = cv2.inRange(hsv, yellow_lower, yellow_upper)
            white_part = cv2.inRange(image, white_lower, white_upper)

            red_picture = cv2.bitwise_and(image, image, mask= red_part)
            blue_picture = cv2.bitwise_and(image, image, mask=blue_part)
            green_picture = cv2.bitwise_and(image, image, mask = green_part)
            yellow_picture = cv2.bitwise_and(image, image, mask = yellow_part)
            white_picture = cv2.bitwise_and(image, image, mask = white_part)

            added = red_picture +  blue_picture + green_picture + yellow_picture + white_picture

            cv2.imshow('result', added)
            cv2.imshow('red', red_picture)
            cv2.imshow('blue', blue_picture)
            cv2.imshow('green', green_picture)
            cv2.imshow('yellow', yellow_picture)
            cv2.imshow('white', white_picture)

            red_pixels = cv2.countNonZero(red_part)
            blue_pixels = cv2.countNonZero(blue_part)
            yellow_pixels = cv2.countNonZero(yellow_part)
            green_pixels = cv2.countNonZero(green_part)
            white_pixels = cv2.countNonZero(white_part)

            if ((red_pixels+30>=blue_pixels) and (red_pixels+30>=green_pixels) and (red_pixels+30>=yellow_pixels) and (red_pixels+30>=white_pixels)):
                print("red!")
                msg.frame_id = '-1'
            elif((blue_pixels+30>=red_pixels) and (blue_pixels+30>=green_pixels) and (blue_pixels+30>=yellow_pixels) and (blue_pixels+30>=white_pixels)):
                print("blue!")
                msg.frame_id = '+1'
            else: 
                print("unknown!")
                msg.frame_id = '0'
                
            cv2.waitKey(1)
            self.color_pub.publish(msg)
            
        except CvBridgeError as e:
            print(e)

def main(args=None):
    rclpy.init(args=args)
    detector = DetermineColor()
    try:
        rclpy.spin(detector)
    except KeyboardInterrupt:
        pass
    detector.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
